<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>css :has伪类选择器</title>
    <link href="/css%20has%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <url>/css%20has%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在:has()选择器出现之前，可以通过css选择后代元素以及兄弟元素，只能选择平级或者是下级<br>而:has()能让我们通过下级元素去选择父元素，这给我们提供了一种新的操作css的方式</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.main-content</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0.9</span>);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f2f3f5</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.main-content</span> <span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.main-content</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:has</span>(.is-has)<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#2cabf8</span>;<br>&#125;<br><br><span class="hljs-selector-class">.main-content</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:has</span>(.is-has))<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0.6</span>);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffdb66</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;main-content&quot;</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span> class=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span> class=<span class="hljs-string">&quot;is-has&quot;</span>&gt;我是has&lt;/span&gt;<br>    &lt;/p&gt;<br>    &lt;<span class="hljs-selector-tag">p</span> class=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>      &lt;span&gt;我不是has&lt;/span&gt;<br>    &lt;/p&gt;<br>    &lt;<span class="hljs-selector-tag">p</span> class=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>      &lt;span&gt;我不是has&lt;/span&gt;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="/../images/css-has.gif" alt="css has"></p><ul><li>对于后代有.is-has类名的父级元素(.item)，hover的时候背景改为#2cabf8，字体颜色改为#fff</li><li>对于后代没有.is-has类名的父级元素(.item)，hover的时候背景颜色改为#ffdb66，字体颜色改为rgba(26, 29, 52, 0.6)</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>:has()伪类选择器可以轻松通过下级元素选中上级元素，并且可以结合其他的伪类一起使用</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="/../images/css-has.png" alt="css has"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/fr/docs/Web/CSS/:has">mdn</a><br><a href="https://caniuse.com/?search=has">can i use</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode使用uniapp开发小程序</title>
    <link href="/vscode%E4%BD%BF%E7%94%A8uniapp%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F.html"/>
    <url>/vscode%E4%BD%BF%E7%94%A8uniapp%E5%BC%80%E5%8F%91%E5%B0%8F%E7%A8%8B%E5%BA%8F.html</url>
    
    <content type="html"><![CDATA[<p>众所周知，hbuilderx界面丑爆了，并且插件不够丰富，对于习惯使用vscode开发的人来说，hbuilder实在是不好用。<br>下面介绍一下在vscode编辑器中使用uniapp开发微信小程序</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>win 10系统</li><li><a href="https://www.dcloud.io/hbuilderx.html">hbuilderx</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a></li><li><a href="https://nodejs.org/zh-cn/download/prebuilt-installer">node</a></li><li><a href="https://git-scm.com/downloads">git</a></li></ul><h2 id="下载uniapp模板"><a href="#下载uniapp模板" class="headerlink" title="下载uniapp模板"></a>下载uniapp模板</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npx</span> degit dcloudio/uni-preset-vue<span class="hljs-comment">#vite-ts vscode-uniapp</span><br></code></pre></td></tr></table></figure><p>这是一个vue3 + vite + ts的模板</p><h2 id="vscode安装uniapp-run"><a href="#vscode安装uniapp-run" class="headerlink" title="vscode安装uniapp run"></a>vscode安装uniapp run</h2><ul><li>使用vscode打开下载的模板</li><li>点击编辑左侧的扩展图标，搜索uniapp run并安装</li></ul><h2 id="配置uniapp-run"><a href="#配置uniapp-run" class="headerlink" title="配置uniapp run"></a>配置uniapp run</h2><p>点击设置，进入设置界面，关键字搜索uniapp，配置hbuilderx和微信开发者工具的安装路径<br><img src="/../images/vscode-uniapp.png" alt="vscode uniapp"></p><h2 id="配置launch-json"><a href="#配置launch-json" class="headerlink" title="配置launch.json"></a>配置launch.json</h2><ol><li>点击编辑器左侧菜单run and debug或者f5 选择Uniapp Run</li><li>点击create a launch.json file， 并选择Uniapp Run，随后会在项目根目录下生成.vscode文件夹，并且文件夹下已经生成了launch.json文件</li><li>配置launch.json</li><li>执行npm i安装依赖</li><li>回到vscode编辑器，f5即可运行成功</li></ol><p>配置完成如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// Use IntelliSense to learn about possible attributes.</span><br>    <span class="hljs-comment">// Hover to view descriptions of existing attributes.</span><br>    <span class="hljs-comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;uniapp-run&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Uniapp Run&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;platform&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mp-weixin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vueVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v3&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// vue3就是v3</span><br>            <span class="hljs-attr">&quot;openDevTool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;src&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/项目根目录/src&quot;</span> <span class="hljs-comment">// manifest.json的上级目录，如果manifest.json在根目录，删掉此行</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令行操作</title>
    <link href="/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C.html"/>
    <url>/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C.html</url>
    
    <content type="html"><![CDATA[<p>大多数开发人员每天都会使用 Git，但许多人只是对其功能略知一二。<br>学习一些 git 命令行技巧可以改变游戏规则，让你更高效、更有成效，对版本控制更有信心。<br>下面简单介绍一些常用的git命令行操作，以下所有的编辑模式基于vim</p><h2 id="挑选提交–cherrypick"><a href="#挑选提交–cherrypick" class="headerlink" title="挑选提交–cherrypick"></a>挑选提交–cherrypick</h2><p>需要来自另一个分支的特定提交？挑选提交可让您将其应用于当前分支，而无需合并整个分支。<br>如何使用：</p><h3 id="挑拣单个提交"><a href="#挑拣单个提交" class="headerlink" title="挑拣单个提交"></a>挑拣单个提交</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git cherry-pick &lt;commit-<span class="hljs-built_in">hash</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="挑拣多个提交"><a href="#挑拣多个提交" class="headerlink" title="挑拣多个提交"></a>挑拣多个提交</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git cherry<span class="hljs-operator">-</span>pick <span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash1 <span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash2<br></code></pre></td></tr></table></figure><h3 id="挑拣一个区间内提交"><a href="#挑拣一个区间内提交" class="headerlink" title="挑拣一个区间内提交"></a>挑拣一个区间内提交</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">区间左开右闭<br>git cherry<span class="hljs-operator">-</span>pick <span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash1...commit<span class="hljs-operator">-</span>hash2<br><br>区间左闭右闭<br>git cherry<span class="hljs-operator">-</span>pick <span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash1<span class="hljs-operator">^</span>...<span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash2<br></code></pre></td></tr></table></figure><h3 id="终止或继续挑拣"><a href="#终止或继续挑拣" class="headerlink" title="终止或继续挑拣"></a>终止或继续挑拣</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">git cherry-pick <span class="hljs-comment">--abort</span><br>git cherry-pick <span class="hljs-comment">--continue</span><br></code></pre></td></tr></table></figure><h2 id="存储修改"><a href="#存储修改" class="headerlink" title="存储修改"></a>存储修改</h2><p>需要切换分支但又不想丢失当前更改？存储可让你保存工作而不提交，让你稍后返回</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash</span><br></code></pre></td></tr></table></figure><h3 id="查看所有存储"><a href="#查看所有存储" class="headerlink" title="查看所有存储"></a>查看所有存储</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash list</span><br></code></pre></td></tr></table></figure><p><img src="/../images/git-stash.png" alt="git stash list"></p><h3 id="应用某次存储"><a href="#应用某次存储" class="headerlink" title="应用某次存储"></a>应用某次存储</h3><p>apply后面的名称是stash list的名称</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git stash apply <span class="hljs-symbol">stash@</span>&#123;<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="合并提交"><a href="#合并提交" class="headerlink" title="合并提交"></a>合并提交</h2><p>有时候我们提交过于随意，或者有几次提交修改的是同一个东西，此时我们可以合并提交</p><p><img src="/../images/git-log.png" alt="git log"></p><p>我们需要合并两次test提交，这里介绍两种方式</p><h3 id="通过reset合并提交"><a href="#通过reset合并提交" class="headerlink" title="通过reset合并提交"></a>通过reset合并提交</h3><p>git reset的本意是版本回退，回退时可以选择保留commit提交。我们基于git reset的作用，可以实现多次commit提交的合并。这个不需要vim编辑，很少有冲突</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">git reset HEAD~<span class="hljs-number">2</span> <span class="hljs-comment">// 合并最近两次提交</span><br></code></pre></td></tr></table></figure><p>执行后文件重新变成modified状态，需要重新提交</p><h3 id="通过rebase合并提交"><a href="#通过rebase合并提交" class="headerlink" title="通过rebase合并提交"></a>通过rebase合并提交</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git rebase -<span class="hljs-selector-tag">i</span> HEAD~<span class="hljs-number">2</span> <span class="hljs-comment">// 合并最近两次提交</span><br></code></pre></td></tr></table></figure><p><img src="/../images/git-rebase.png" alt="git rebase"></p><p>输入此条命令后就会进入vim界面，最上面是我们需要合并的提交，倒序排列，下方是rebase的一些命令，这里我们只需要是用pick，squsah命令，如果需要丢弃某次提交的内容使用drop</p><p>输入i进入编辑模式<br><img src="/../images/rebase%E7%BC%96%E8%BE%91.png" alt="git rebase"></p><p>将两次提交都合并到test1这次提交中<br>然后esc返回，冒号wq，保存退出</p><p>退出之后，我们会进入再次进入vim，我们可以编辑commit信息<br><img src="/../images/rebase%E9%87%8D%E6%96%B0%E6%8F%90%E4%BA%A4.png" alt="git rebase"></p><p>这里可以用之前的提交msg，也可以重新自定义编辑提交msg<br>再次输入i进入编辑模式，我们把之前的msg都注释，重新写一条<br><img src="/../images/rebase%E7%BC%96%E8%BE%91%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF.png" alt="git rebase"></p><p>然后esc返回，冒号wq，保存退出</p><p><img src="/../images/rebase%E5%AE%8C%E6%88%90.png" alt="git rebase"></p><p>这就提示合并成功了</p><p>rebase也可以合并一个区间里的提交，类似与cherry-pick，具体操作和上方操作一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git rebase <span class="hljs-operator">-</span>i <span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash1<span class="hljs-operator">^</span>...<span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>hash2<br></code></pre></td></tr></table></figure><blockquote><p><font color="red">警告：在多人协作开发中，尽量避免对于已经推送到远端的的提交进行合并操作，因为这样会造成其他人git分叉</font></p></blockquote><h2 id="查看本地git操作日志"><a href="#查看本地git操作日志" class="headerlink" title="查看本地git操作日志"></a>查看本地git操作日志</h2><p>有时候我们会有一些误操作，那么这个时候我们就可以使用reflog查看git本地操作日志，他可以让我们轻松回到误操作之前的操作reflog又称为git后悔药</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git reflog <span class="hljs-attribute">--date</span>=iso<br></code></pre></td></tr></table></figure><p>reflog后面参数是列出操作的标准时间</p><p><img src="/../images/git-reflog.png" alt="git reflog"></p><ul><li>前面8位编码类似于commitid，是当前操作的一次快照，通过reset操作我们可以回到任意操作对应的代码</li><li>中间是我们操作的分支已经操作的时间</li><li>最后就是我们当前是进行的何种操作。eg: commit, checkout, rebase, merge等</li></ul><h3 id="快速修复最后一次提交"><a href="#快速修复最后一次提交" class="headerlink" title="快速修复最后一次提交"></a>快速修复最后一次提交</h3><p>忘记添加文件或在提交信息中输入错误？git commit —amend 可让您更新上次提交，而无需创建新提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo + fluid搭建个人博客</title>
    <link href="/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <url>/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>win 10系统</li><li><a href="https://nodejs.org/zh-cn/download/prebuilt-installer">node</a></li><li><a href="https://git-scm.com/downloads">git</a></li><li><a href="https://github.com/">github</a></li></ul><h1 id="hexo快速安装"><a href="#hexo快速安装" class="headerlink" title="hexo快速安装"></a>hexo快速安装</h1><h2 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> hexo-blog<br></code></pre></td></tr></table></figure><p>进入hexo-blog文件夹，安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hexo-blog<br>npm install<br></code></pre></td></tr></table></figure><p>安装完依赖，执行命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>在浏览器打开<a href="http://localhost:4000/">http://localhost:4000/</a> 就可以访问我们的博客了</p><h1 id="fluid主题安装"><a href="#fluid主题安装" class="headerlink" title="fluid主题安装"></a>fluid主题安装</h1><h2 id="通过npm安装"><a href="#通过npm安装" class="headerlink" title="通过npm安装"></a>通过npm安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-theme-fluid -S<br></code></pre></td></tr></table></figure><p>安装完成后，在项目的根目录下新建 <strong>_config.fluid.yml</strong>，将 <strong>node_modules&#x2F;hexo-theme-fluid&#x2F;_config.yml</strong> 的内容复制到 <strong>_config.fluid.yml</strong> 中</p><h2 id="在github上下载zip"><a href="#在github上下载zip" class="headerlink" title="在github上下载zip"></a>在github上下载zip</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid下载地址</a></p><p>将下载好的zip解压，复制到themes文件夹下，最终的路径是 <strong>themes&#x2F;fluid</strong>，以下都是按照第二种方式进行配置</p><h2 id="fluid主题配置"><a href="#fluid主题配置" class="headerlink" title="fluid主题配置"></a>fluid主题配置</h2><p>进入fluid主题配置文件中，路径：<strong>themes&#x2F;fluid&#x2F;_config.yml</strong></p><h3 id="字体配置"><a href="#字体配置" class="headerlink" title="字体配置"></a>字体配置</h3><p>当前博客选择的字体是cursive<br><img src="/../images/font-set.png" alt="字体配置"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>评论系统选择的是<a href="https://valine.js.org/">Valine</a></p><h4 id="启用Valine评论系统"><a href="#启用Valine评论系统" class="headerlink" title="启用Valine评论系统"></a>启用Valine评论系统</h4><p><img src="/../images/comment-plugin.png" alt="评论系统"></p><blockquote><p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost、Docsify 等博客和文档程序在使用Valine。</p></blockquote><p>特性</p><ul><li>快速</li><li>安全</li><li>Emoji</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用</li><li>文章阅读量统计</li></ul><h4 id="注册LeanCloud账号"><a href="#注册LeanCloud账号" class="headerlink" title="注册LeanCloud账号"></a>注册LeanCloud账号</h4><p>由于valine是基于LeanCloud，配置valine需要appid以及appkey，所以需要<a href="https://console.leancloud.cn/register">注册LeanCloud</a>账号</p><p>注册完成后，登录后点击创建应用，填写应用名称然后选择开发版即可<br><img src="/../images/leancloud-app.png" alt="创建应用"></p><p>创建完成后，点击应用的设置图标，进入应用配置详情界面，点击应用凭证，可以看到右侧的appid和appkey信息，复制出来，用于配置valine<br><img src="/../images/leancloud-appid.png" alt="appId和appKey"></p><h4 id="LeanCloud配置安全域名"><a href="#LeanCloud配置安全域名" class="headerlink" title="LeanCloud配置安全域名"></a>LeanCloud配置安全域名</h4><p>进入应用配置界面，选择安全中心<br><img src="/../images/safe-domain.png" alt="配置安全域名"><br>服务开关只勾选数据存储，web安全域名配置为：<a href="http://localhost:4000，用于本地测试">http://localhost:4000，用于本地测试</a></p><blockquote><p>web域名可以添加多个，多个域名换行分割，如果有自定义域名，换行后加入自己的自定义域名即可</p></blockquote><h4 id="valine配置"><a href="#valine配置" class="headerlink" title="valine配置"></a>valine配置</h4><p><img src="/../images/valine-set.png" alt="valine配置"></p><h3 id="页面统计配置"><a href="#页面统计配置" class="headerlink" title="页面统计配置"></a>页面统计配置</h3><h4 id="文章浏览量统计"><a href="#文章浏览量统计" class="headerlink" title="文章浏览量统计"></a>文章浏览量统计</h4><p>启用配置，并且来源选择leancloud<br><img src="/../images/view-set.png" alt="浏览量统计"></p><h3 id="leancloud开启评论管理"><a href="#leancloud开启评论管理" class="headerlink" title="leancloud开启评论管理"></a>leancloud开启评论管理</h3><p>进入应用配置界面，点击 数据存储 -&gt; 结构化数据 -&gt; 创建Class</p><p><img src="/../images/leancloud-comment.png" alt="添加Comment类"></p><p>class名称一定要填写 <strong>Comment</strong>， 完成后点击创建即可，后面所有的评论数据都能在Comment类里看到</p><h3 id="leancloud开启访问量统计"><a href="#leancloud开启访问量统计" class="headerlink" title="leancloud开启访问量统计"></a>leancloud开启访问量统计</h3><p>进入应用配置界面，点击 数据存储 -&gt; 结构化数据 -&gt; 创建Class<br><img src="/../images/leancloud-counter.png" alt="添加Counter类"></p><p>名称固定位<strong>Counter</strong>，和Comment一样</p><p>在项目根目录下_config.yml中做如下配置<br><img src="/../images/leancloud-visitor.png" alt="访问量统计"></p><p>页脚显示网站pv，uv统计，进入themes -&gt; fluid -&gt; _config.yml中，做如下配置</p><p><img src="/../images/leancloud-pv.png" alt="pv,uv统计"></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="将代码托管到github"><a href="#将代码托管到github" class="headerlink" title="将代码托管到github"></a>将代码托管到github</h2><p><a href="https://github.com/signup">注册</a>一个github账号，注册成功后，新建一个仓库<br><img src="/../images/create-repo.png" alt="创建github仓库"></p><blockquote><p>用户名使用github用户名，并且一定要选择公开</p></blockquote><h2 id="配置一键部署"><a href="#配置一键部署" class="headerlink" title="配置一键部署"></a>配置一键部署</h2><ol><li>安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-deployer-git -S<br></code></pre></td></tr></table></figure></li><li>在<font color="#f23335" bold>根目录 _config.yml</font>中添加以下配置（如果配置已经存在，请将其替换为如下）:<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/&lt;username&gt;/&lt;project&gt;</span><br>  <span class="hljs-meta"># example, https:<span class="hljs-comment">//github.com/hexojs/hexojs.github.io</span></span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></li><li>执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</li><li>浏览 username.github.io，检查你的网站能否运作</li></ol><blockquote><p>分支根据情况自己选择，github默认main分支</p></blockquote><p>参考： <a href="https://hexo.io/zh-cn/docs/github-pages">在 GitHub Pages 上部署 Hexo</a></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>以<a href="https://cloud.tencent.com/">腾讯云</a>为例，注册域名成功之后，来到<a href="https://console.cloud.tencent.com/domain/all-domain/all">我的域名</a></p><p><img src="/../images/domain-dns.png" alt="域名列表"></p><p>点击解析按钮，添加域名解析<br><img src="/../images/dns-record.png" alt="域名解析"></p><p>回到github仓库添加自定义域名，进入仓库，点击setting -&gt; pages</p><p><img src="/../images/custom-domain.png" alt="自定义域名"></p><p>在custom domain选项输入你的域名，点击save，等待解析完成后，就完成了自定义域名配置，此时就可以通过自定义域名来访问博客了</p><h1 id="cloudfare加速"><a href="#cloudfare加速" class="headerlink" title="cloudfare加速"></a>cloudfare加速</h1><p>众所周知，国内访问github非常慢，除非使用梯子，但是对于多数网站访问者来说，不可能要求他访问你的网站还得自备梯子，所以将github page自定义域名托管到cloudfare</p><h1 id="seo"><a href="#seo" class="headerlink" title="seo"></a>seo</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://valine.js.org/">valine官网</a><br><a href="https://blog.csdn.net/qq_36171954/article/details/139309092">Github Pages域名托管至Cloudflare</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
